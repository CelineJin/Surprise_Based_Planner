#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jun  8 21:40:45 2021

@author: celinejin
"""

import numpy as np

def closest_node(node, nodes,xdim):
    R = min(np.sqrt(np.sum((nodes - node)**2, axis=1)))
    # sum_node = np.sum(node**2)
    
    lb = np.maximum(node+0.5*np.array([-R]*xdim).reshape((-1,xdim)), np.array([0]*xdim).reshape((-1,xdim)))
    ub = np.minimum(node+0.5*np.array([R]*xdim).reshape((-1,xdim)), np.array([1]*xdim).reshape((-1,xdim)))
    node_sam = np.random.uniform(lb,ub).reshape((-1,xdim)) 
    while(np.sum((node-node_sam)**2) > R**2):
        node_sam = np.random.uniform(lb,ub).reshape((-1,xdim))
        
    return node_sam

def closest_node0(node, nodes, Xmax, note):
    # dist_2 = np.sum((nodes - node)**2, axis=1)
    R = abs(node-nodes).min()
    lb = np.maximum(0,node-0.5*R)
    ub = np.minimum(Xmax,node+0.5*R)
    node_sam = np.random.uniform(lb,ub)
    run = 1
    while(abs(node-node_sam)>R and run<=1000):
        node_sam = np.random.uniform(lb,ub)
        run += 1
    if run == 1001:
        note.append('Cannot find a point in the neighborhood due to a too small neighborhood.')
    # return np.argmin(dist_2)
    return node_sam, note